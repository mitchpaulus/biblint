//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from BibParser.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class BibParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		WORD=1, AT=2, COMMA=3, EQUALS=4, LEFT_BRACE=5, RIGHT_BRACE=6, WS=7, FIELD_WS=8, 
		TEXCONTENT=9, FIELD_VALUE_WORD=10;
	public const int
		RULE_file = 0, RULE_bibentry = 1, RULE_fields = 2, RULE_field = 3, RULE_value = 4;
	public static readonly string[] ruleNames = {
		"file", "bibentry", "fields", "field", "value"
	};

	private static readonly string[] _LiteralNames = {
		null, null, "'@'", "','", "'='", "'{'", "'}'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "WORD", "AT", "COMMA", "EQUALS", "LEFT_BRACE", "RIGHT_BRACE", "WS", 
		"FIELD_WS", "TEXCONTENT", "FIELD_VALUE_WORD"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "BibParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static BibParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public BibParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public BibParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class FileContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(BibParser.Eof, 0); }
		public BibentryContext[] bibentry() {
			return GetRuleContexts<BibentryContext>();
		}
		public BibentryContext bibentry(int i) {
			return GetRuleContext<BibentryContext>(i);
		}
		public FileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBibParserListener typedListener = listener as IBibParserListener;
			if (typedListener != null) typedListener.EnterFile(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBibParserListener typedListener = listener as IBibParserListener;
			if (typedListener != null) typedListener.ExitFile(this);
		}
	}

	[RuleVersion(0)]
	public FileContext file() {
		FileContext _localctx = new FileContext(Context, State);
		EnterRule(_localctx, 0, RULE_file);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 13;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AT) {
				{
				{
				State = 10; bibentry();
				}
				}
				State = 15;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 16; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BibentryContext : ParserRuleContext {
		public ITerminalNode AT() { return GetToken(BibParser.AT, 0); }
		public ITerminalNode[] WORD() { return GetTokens(BibParser.WORD); }
		public ITerminalNode WORD(int i) {
			return GetToken(BibParser.WORD, i);
		}
		public ITerminalNode LEFT_BRACE() { return GetToken(BibParser.LEFT_BRACE, 0); }
		public ITerminalNode COMMA() { return GetToken(BibParser.COMMA, 0); }
		public FieldsContext fields() {
			return GetRuleContext<FieldsContext>(0);
		}
		public ITerminalNode RIGHT_BRACE() { return GetToken(BibParser.RIGHT_BRACE, 0); }
		public BibentryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bibentry; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBibParserListener typedListener = listener as IBibParserListener;
			if (typedListener != null) typedListener.EnterBibentry(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBibParserListener typedListener = listener as IBibParserListener;
			if (typedListener != null) typedListener.ExitBibentry(this);
		}
	}

	[RuleVersion(0)]
	public BibentryContext bibentry() {
		BibentryContext _localctx = new BibentryContext(Context, State);
		EnterRule(_localctx, 2, RULE_bibentry);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 18; Match(AT);
			State = 19; Match(WORD);
			State = 20; Match(LEFT_BRACE);
			State = 21; Match(WORD);
			State = 22; Match(COMMA);
			State = 23; fields();
			State = 24; Match(RIGHT_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldsContext : ParserRuleContext {
		public FieldContext[] field() {
			return GetRuleContexts<FieldContext>();
		}
		public FieldContext field(int i) {
			return GetRuleContext<FieldContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(BibParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(BibParser.COMMA, i);
		}
		public FieldsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fields; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBibParserListener typedListener = listener as IBibParserListener;
			if (typedListener != null) typedListener.EnterFields(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBibParserListener typedListener = listener as IBibParserListener;
			if (typedListener != null) typedListener.ExitFields(this);
		}
	}

	[RuleVersion(0)]
	public FieldsContext fields() {
		FieldsContext _localctx = new FieldsContext(Context, State);
		EnterRule(_localctx, 4, RULE_fields);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 26; field();
			State = 31;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 27; Match(COMMA);
					State = 28; field();
					}
					} 
				}
				State = 33;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			State = 35;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 34; Match(COMMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldContext : ParserRuleContext {
		public ITerminalNode WORD() { return GetToken(BibParser.WORD, 0); }
		public ITerminalNode EQUALS() { return GetToken(BibParser.EQUALS, 0); }
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public FieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBibParserListener typedListener = listener as IBibParserListener;
			if (typedListener != null) typedListener.EnterField(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBibParserListener typedListener = listener as IBibParserListener;
			if (typedListener != null) typedListener.ExitField(this);
		}
	}

	[RuleVersion(0)]
	public FieldContext field() {
		FieldContext _localctx = new FieldContext(Context, State);
		EnterRule(_localctx, 6, RULE_field);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 37; Match(WORD);
			State = 38; Match(EQUALS);
			State = 39; value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		public ITerminalNode FIELD_VALUE_WORD() { return GetToken(BibParser.FIELD_VALUE_WORD, 0); }
		public ITerminalNode TEXCONTENT() { return GetToken(BibParser.TEXCONTENT, 0); }
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBibParserListener typedListener = listener as IBibParserListener;
			if (typedListener != null) typedListener.EnterValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBibParserListener typedListener = listener as IBibParserListener;
			if (typedListener != null) typedListener.ExitValue(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 8, RULE_value);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 41;
			_la = TokenStream.LA(1);
			if ( !(_la==TEXCONTENT || _la==FIELD_VALUE_WORD) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\f', '.', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', '\t', 
		'\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', '\x6', 
		'\t', '\x6', '\x3', '\x2', '\a', '\x2', '\xE', '\n', '\x2', '\f', '\x2', 
		'\xE', '\x2', '\x11', '\v', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\a', '\x4', ' ', '\n', '\x4', '\f', '\x4', '\xE', '\x4', '#', 
		'\v', '\x4', '\x3', '\x4', '\x5', '\x4', '&', '\n', '\x4', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x2', '\x2', '\a', '\x2', '\x4', '\x6', '\b', '\n', '\x2', 
		'\x3', '\x3', '\x2', '\v', '\f', '\x2', '+', '\x2', '\xF', '\x3', '\x2', 
		'\x2', '\x2', '\x4', '\x14', '\x3', '\x2', '\x2', '\x2', '\x6', '\x1C', 
		'\x3', '\x2', '\x2', '\x2', '\b', '\'', '\x3', '\x2', '\x2', '\x2', '\n', 
		'+', '\x3', '\x2', '\x2', '\x2', '\f', '\xE', '\x5', '\x4', '\x3', '\x2', 
		'\r', '\f', '\x3', '\x2', '\x2', '\x2', '\xE', '\x11', '\x3', '\x2', '\x2', 
		'\x2', '\xF', '\r', '\x3', '\x2', '\x2', '\x2', '\xF', '\x10', '\x3', 
		'\x2', '\x2', '\x2', '\x10', '\x12', '\x3', '\x2', '\x2', '\x2', '\x11', 
		'\xF', '\x3', '\x2', '\x2', '\x2', '\x12', '\x13', '\a', '\x2', '\x2', 
		'\x3', '\x13', '\x3', '\x3', '\x2', '\x2', '\x2', '\x14', '\x15', '\a', 
		'\x4', '\x2', '\x2', '\x15', '\x16', '\a', '\x3', '\x2', '\x2', '\x16', 
		'\x17', '\a', '\a', '\x2', '\x2', '\x17', '\x18', '\a', '\x3', '\x2', 
		'\x2', '\x18', '\x19', '\a', '\x5', '\x2', '\x2', '\x19', '\x1A', '\x5', 
		'\x6', '\x4', '\x2', '\x1A', '\x1B', '\a', '\b', '\x2', '\x2', '\x1B', 
		'\x5', '\x3', '\x2', '\x2', '\x2', '\x1C', '!', '\x5', '\b', '\x5', '\x2', 
		'\x1D', '\x1E', '\a', '\x5', '\x2', '\x2', '\x1E', ' ', '\x5', '\b', '\x5', 
		'\x2', '\x1F', '\x1D', '\x3', '\x2', '\x2', '\x2', ' ', '#', '\x3', '\x2', 
		'\x2', '\x2', '!', '\x1F', '\x3', '\x2', '\x2', '\x2', '!', '\"', '\x3', 
		'\x2', '\x2', '\x2', '\"', '%', '\x3', '\x2', '\x2', '\x2', '#', '!', 
		'\x3', '\x2', '\x2', '\x2', '$', '&', '\a', '\x5', '\x2', '\x2', '%', 
		'$', '\x3', '\x2', '\x2', '\x2', '%', '&', '\x3', '\x2', '\x2', '\x2', 
		'&', '\a', '\x3', '\x2', '\x2', '\x2', '\'', '(', '\a', '\x3', '\x2', 
		'\x2', '(', ')', '\a', '\x6', '\x2', '\x2', ')', '*', '\x5', '\n', '\x6', 
		'\x2', '*', '\t', '\x3', '\x2', '\x2', '\x2', '+', ',', '\t', '\x2', '\x2', 
		'\x2', ',', '\v', '\x3', '\x2', '\x2', '\x2', '\x5', '\xF', '!', '%',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
