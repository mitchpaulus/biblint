//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from BibLexer.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class BibLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		WORD=1, AT=2, COMMA=3, EQUALS=4, LEFT_BRACE=5, RIGHT_BRACE=6, WS=7, FIELD_WS=8, 
		TEXCONTENT=9, FIELD_VALUE_WORD=10;
	public const int
		INFIELD=1;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE", "INFIELD"
	};

	public static readonly string[] ruleNames = {
		"WORD", "AT", "COMMA", "EQUALS", "LEFT_BRACE", "RIGHT_BRACE", "WS", "FIELD_WS", 
		"TEXCONTENT", "FIELD_VALUE_WORD", "Special", "EscapeSequence"
	};


	public BibLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public BibLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, "'@'", "','", "'='", "'{'", "'}'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "WORD", "AT", "COMMA", "EQUALS", "LEFT_BRACE", "RIGHT_BRACE", "WS", 
		"FIELD_WS", "TEXCONTENT", "FIELD_VALUE_WORD"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "BibLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static BibLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x2', '\f', 'T', '\b', '\x1', '\b', '\x1', '\x4', '\x2', '\t', 
		'\x2', '\x4', '\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', 
		'\t', '\x5', '\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', 
		'\b', '\t', '\b', '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', 
		'\v', '\t', '\v', '\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x3', 
		'\x2', '\x6', '\x2', '\x1E', '\n', '\x2', '\r', '\x2', '\xE', '\x2', '\x1F', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\a', '\x3', '\a', '\x3', '\b', '\x6', '\b', '/', '\n', '\b', '\r', 
		'\b', '\xE', '\b', '\x30', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x6', 
		'\t', '\x36', '\n', '\t', '\r', '\t', '\xE', '\t', '\x37', '\x3', '\t', 
		'\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\a', 
		'\n', '@', '\n', '\n', '\f', '\n', '\xE', '\n', '\x43', '\v', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x6', '\v', 
		'J', '\n', '\v', '\r', '\v', '\xE', '\v', 'K', '\x3', '\v', '\x3', '\v', 
		'\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\x41', '\x2', '\xE', '\x4', '\x3', '\x6', '\x4', '\b', '\x5', '\n', '\x6', 
		'\f', '\a', '\xE', '\b', '\x10', '\t', '\x12', '\n', '\x14', '\v', '\x16', 
		'\f', '\x18', '\x2', '\x1A', '\x2', '\x4', '\x2', '\x3', '\x6', '\a', 
		'\x2', '/', '/', '\x32', ';', '\x43', '\\', '\x61', '\x61', '\x63', '|', 
		'\x4', '\x2', '\v', '\f', '\"', '\"', '\x4', '\x2', '}', '}', '\x7F', 
		'\x7F', '\x6', '\x2', '/', '/', '\x32', ';', '\x43', '\\', '\x63', '|', 
		'\x2', 'W', '\x2', '\x4', '\x3', '\x2', '\x2', '\x2', '\x2', '\x6', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\b', '\x3', '\x2', '\x2', '\x2', '\x2', '\n', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '\f', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'\xE', '\x3', '\x2', '\x2', '\x2', '\x2', '\x10', '\x3', '\x2', '\x2', 
		'\x2', '\x3', '\x12', '\x3', '\x2', '\x2', '\x2', '\x3', '\x14', '\x3', 
		'\x2', '\x2', '\x2', '\x3', '\x16', '\x3', '\x2', '\x2', '\x2', '\x4', 
		'\x1D', '\x3', '\x2', '\x2', '\x2', '\x6', '!', '\x3', '\x2', '\x2', '\x2', 
		'\b', '#', '\x3', '\x2', '\x2', '\x2', '\n', '%', '\x3', '\x2', '\x2', 
		'\x2', '\f', ')', '\x3', '\x2', '\x2', '\x2', '\xE', '+', '\x3', '\x2', 
		'\x2', '\x2', '\x10', '.', '\x3', '\x2', '\x2', '\x2', '\x12', '\x35', 
		'\x3', '\x2', '\x2', '\x2', '\x14', ';', '\x3', '\x2', '\x2', '\x2', '\x16', 
		'I', '\x3', '\x2', '\x2', '\x2', '\x18', 'O', '\x3', '\x2', '\x2', '\x2', 
		'\x1A', 'Q', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x1E', '\t', '\x2', 
		'\x2', '\x2', '\x1D', '\x1C', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x1F', 
		'\x3', '\x2', '\x2', '\x2', '\x1F', '\x1D', '\x3', '\x2', '\x2', '\x2', 
		'\x1F', ' ', '\x3', '\x2', '\x2', '\x2', ' ', '\x5', '\x3', '\x2', '\x2', 
		'\x2', '!', '\"', '\a', '\x42', '\x2', '\x2', '\"', '\a', '\x3', '\x2', 
		'\x2', '\x2', '#', '$', '\a', '.', '\x2', '\x2', '$', '\t', '\x3', '\x2', 
		'\x2', '\x2', '%', '&', '\a', '?', '\x2', '\x2', '&', '\'', '\x3', '\x2', 
		'\x2', '\x2', '\'', '(', '\b', '\x5', '\x2', '\x2', '(', '\v', '\x3', 
		'\x2', '\x2', '\x2', ')', '*', '\a', '}', '\x2', '\x2', '*', '\r', '\x3', 
		'\x2', '\x2', '\x2', '+', ',', '\a', '\x7F', '\x2', '\x2', ',', '\xF', 
		'\x3', '\x2', '\x2', '\x2', '-', '/', '\t', '\x3', '\x2', '\x2', '.', 
		'-', '\x3', '\x2', '\x2', '\x2', '/', '\x30', '\x3', '\x2', '\x2', '\x2', 
		'\x30', '.', '\x3', '\x2', '\x2', '\x2', '\x30', '\x31', '\x3', '\x2', 
		'\x2', '\x2', '\x31', '\x32', '\x3', '\x2', '\x2', '\x2', '\x32', '\x33', 
		'\b', '\b', '\x3', '\x2', '\x33', '\x11', '\x3', '\x2', '\x2', '\x2', 
		'\x34', '\x36', '\t', '\x3', '\x2', '\x2', '\x35', '\x34', '\x3', '\x2', 
		'\x2', '\x2', '\x36', '\x37', '\x3', '\x2', '\x2', '\x2', '\x37', '\x35', 
		'\x3', '\x2', '\x2', '\x2', '\x37', '\x38', '\x3', '\x2', '\x2', '\x2', 
		'\x38', '\x39', '\x3', '\x2', '\x2', '\x2', '\x39', ':', '\b', '\t', '\x3', 
		'\x2', ':', '\x13', '\x3', '\x2', '\x2', '\x2', ';', '\x41', '\a', '}', 
		'\x2', '\x2', '<', '@', '\x5', '\x14', '\n', '\x2', '=', '@', '\x5', '\x1A', 
		'\r', '\x2', '>', '@', '\n', '\x4', '\x2', '\x2', '?', '<', '\x3', '\x2', 
		'\x2', '\x2', '?', '=', '\x3', '\x2', '\x2', '\x2', '?', '>', '\x3', '\x2', 
		'\x2', '\x2', '@', '\x43', '\x3', '\x2', '\x2', '\x2', '\x41', '\x42', 
		'\x3', '\x2', '\x2', '\x2', '\x41', '?', '\x3', '\x2', '\x2', '\x2', '\x42', 
		'\x44', '\x3', '\x2', '\x2', '\x2', '\x43', '\x41', '\x3', '\x2', '\x2', 
		'\x2', '\x44', '\x45', '\a', '\x7F', '\x2', '\x2', '\x45', '\x46', '\x3', 
		'\x2', '\x2', '\x2', '\x46', 'G', '\b', '\n', '\x4', '\x2', 'G', '\x15', 
		'\x3', '\x2', '\x2', '\x2', 'H', 'J', '\t', '\x5', '\x2', '\x2', 'I', 
		'H', '\x3', '\x2', '\x2', '\x2', 'J', 'K', '\x3', '\x2', '\x2', '\x2', 
		'K', 'I', '\x3', '\x2', '\x2', '\x2', 'K', 'L', '\x3', '\x2', '\x2', '\x2', 
		'L', 'M', '\x3', '\x2', '\x2', '\x2', 'M', 'N', '\b', '\v', '\x4', '\x2', 
		'N', '\x17', '\x3', '\x2', '\x2', '\x2', 'O', 'P', '\t', '\x4', '\x2', 
		'\x2', 'P', '\x19', '\x3', '\x2', '\x2', '\x2', 'Q', 'R', '\a', '^', '\x2', 
		'\x2', 'R', 'S', '\x5', '\x18', '\f', '\x2', 'S', '\x1B', '\x3', '\x2', 
		'\x2', '\x2', '\n', '\x2', '\x3', '\x1F', '\x30', '\x37', '?', '\x41', 
		'K', '\x5', '\a', '\x3', '\x2', '\b', '\x2', '\x2', '\x6', '\x2', '\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
